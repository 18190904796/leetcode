给定一个由 '1'（陆地）和 '0'（水）组成的的二维网格，计算岛屿的数量。一个岛被水包围，并且它是通过水平方向或垂直方向上相邻的陆地连接而成的。你可以假设网格的四个边均被水包围。

示例 1:

输入:
11110
11010
11000
00000

输出: 1

示例 2:

输入:
11000
11000
00100
00011

输出: 3

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/number-of-islands
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

class Solution {
public:
    int numIslands(vector<vector<char>>& grid) {
        if(grid.empty()||grid[0].empty()) return 0;
        int m=grid.size(),n=grid[0].size(),ans=0;
        vector<vector<bool>>visited(m,vector<bool>(n,false));
        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(grid[i][j]=='0'||visited[i][j]) continue;
                helper(grid,visited,i,j);
                ans++;
            }
        }
        return ans;
    }

    void helper(vector<vector<char>>&grid, vector<vector<bool>>&visited,int i,int j){
        if(i<0||i>=grid.size()||j<0||j>=grid[0].size()||grid[i][j]=='0'||visited[i][j]) return;
        visited[i][j]=true;
        helper(grid,visited,i-1,j);
        helper(grid,visited,i+1,j);
        helper(grid,visited,i,j-1);
        helper(grid,visited,i,j+1);

    }
};
