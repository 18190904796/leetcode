给出方程式 A / B = k, 其中 A 和 B 均为代表字符串的变量， k 是一个浮点型数字。根据已知方程式求解问题，并返回计算结果。如果结果不存在，则返回 -1.0。

示例 :
给定 a / b = 2.0, b / c = 3.0
问题: a / c = ?, b / a = ?, a / e = ?, a / a = ?, x / x = ? 
返回 [6.0, 0.5, -1.0, 1.0, -1.0 ]

输入为: vector<pair<string, string>> equations, vector<double>& values, vector<pair<string, string>> queries(方程式，方程式结果，问题方程式)， 其中 equations.size() == values.size()，即方程式的长度与方程式结果长度相等（程式与结果一一对应），并且结果值均为正数。以上为方程式的描述。 返回vector<double>类型。

基于上述例子，输入如下：

equations(方程式) = [ ["a", "b"], ["b", "c"] ],
values(方程式结果) = [2.0, 3.0],
queries(问题方程式) = [ ["a", "c"], ["b", "a"], ["a", "e"], ["a", "a"], ["x", "x"] ]. 

输入总是有效的。你可以假设除法运算中不会出现除数为0的情况，且不存在任何矛盾的结果。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/evaluate-division
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

class Solution {
public:
    vector<double> calcEquation(vector<vector<string>>& equations, vector<double>& values, vector<vector<string>>& queries) {
        vector<double> ans;
        for(int i=0;i<equations.size();i++)
        {
            m[equations[i][0]][equations[i][1]]=values[i];
            m[equations[i][1]][equations[i][0]]=1.0/values[i];
        }
        for(auto query : queries)
        {
            unordered_set<string> visited;
            double t=helper(query[0],query[1],visited);
            ans.push_back((t>0)?t:-1);
        }
        return ans;
    }

    double helper(string up, string down, unordered_set<string> & visited){
        if(m[up].count(down)) return m[up][down];
        for(auto a : m[up])
        {
            if(visited.count(a.first)) continue;
            visited.insert(a.first);
            double t=helper(a.first,down,visited);
            if(t>0) return t*a.second;
        }
        return -1;
    }

private:
    unordered_map<string, unordered_map<string,double>> m;
};
