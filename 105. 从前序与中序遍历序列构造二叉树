根据一棵树的前序遍历与中序遍历构造二叉树。

注意:
你可以假设树中没有重复的元素。

例如，给出

前序遍历 preorder = [3,9,20,15,7]
中序遍历 inorder = [9,3,15,20,7]

返回如下的二叉树：

    3
   / \
  9  20
    /  \

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        return buildTree(preorder,0,preorder.size()-1,inorder,0,inorder.size()-1);
    }
    TreeNode* buildTree(vector<int>& preorder,int pLeft,int pRight,vector<int>& inorder, int iLeft,int iRight){
        if(pLeft>pRight||iLeft>iRight)return NULL;
        int i=0;
        for(i=iLeft;i<iRight;i++){
            if(preorder[pLeft]==inorder[i])break;
        }
        TreeNode* cur=new TreeNode(preorder[pLeft]);
        cur->left=buildTree(preorder,pLeft+1,pLeft+i-iLeft,inorder,iLeft,i-1);
        cur->right=buildTree(preorder,pLeft+i-iLeft+1,pRight,inorder,i+1,iRight);
        return cur;
    }
};
