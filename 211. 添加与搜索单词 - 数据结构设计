设计一个支持以下两种操作的数据结构：

void addWord(word)
bool search(word)

search(word) 可以搜索文字或正则表达式字符串，字符串只包含字母 . 或 a-z 。 . 可以表示任何一个字母。

示例:

addWord("bad")
addWord("dad")
addWord("mad")
search("pad") -> false
search("bad") -> true
search(".ad") -> true
search("b..") -> true

说明:

你可以假设所有单词都是由小写字母 a-z 组成的。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/add-and-search-word-data-structure-design
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

class WordDictionary {
public:
    struct TrieNode{
        public:
        TrieNode * child[26];
        bool isWord;
        TrieNode():isWord(false){
            for(auto &a:child) a=NULL;
        }
    };
    /** Initialize your data structure here. */
    WordDictionary() {
        root=new TrieNode();
    }
    
    /** Adds a word into the data structure. */
    void addWord(string word) {
        TrieNode *p=root;
        for(auto a:word){
            int i=a-'a';
            if(!p->child[i])p->child[i]=new TrieNode();
            p=p->child[i];            
        }
        p->isWord=true;
    }
    
    /** Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter. */
    bool search(string word) {
        return searchWord(word,root,0);
    }
    bool searchWord(string & word,TrieNode *p,int i){
        if(i==word.size())return p->isWord;
        if(word[i]=='.'){
            for(auto &a:p->child){
                if(a&&searchWord(word,a,i+1))return true;
            }
            return false;
        }else{
            return p->child[word[i]-'a']&&searchWord(word,p->child[word[i]-'a'],i+1);
        }
    }
private:
    TrieNode *root;
};

/**
 * Your WordDictionary object will be instantiated and called as such:
 * WordDictionary* obj = new WordDictionary();
 * obj->addWord(word);
 * bool param_2 = obj->search(word);
 */
