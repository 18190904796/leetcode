给定一个仅包含 0 和 1 的二维二进制矩阵，找出只包含 1 的最大矩形，并返回其面积。

示例:

输入:
[
  ["1","0","1","0","0"],
  ["1","0","1","1","1"],
  ["1","1","1","1","1"],
  ["1","0","0","1","0"]
]
输出: 6

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/maximal-rectangle
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

class Solution {
public:
    int maximalRectangle(vector<vector<char>>& matrix) {
        int res=0;
        vector<int> height;
        for(int i=0;i<matrix.size();i++){
            height.resize(matrix[i].size());
            for(int j=0;j<matrix[i].size();j++){
                height[j]=matrix[i][j]=='0'?0:(1+height[j]);
            }
            res=max(res,largestRectangleArea(height));
        }
        return res;
    }
    int largestRectangleArea(vector<int>&height){
        int res=0;
        stack<int> s;
        height.push_back(0);
        for(int i=0;i<height.size();i++){
            if(s.empty()||height[s.top()]<=height[i])s.push(i);
            else{
                int tmp=s.top();
                s.pop();
                res=max(res,height[tmp]*(s.empty()?i:(i-s.top()-1)));
                i--;
            }
        }
        return res;
    }
};
